package main

import (
	"encoding/json"
	"log"
	"net/http"
	"time"
	"context"
	"os"
	"fmt"

	"github.com/cosmotek/pgdb"
	"github.com/rs/zerolog"

	"goji.io"
	"goji.io/pat"
)

{{- "\n" }}
{{- $root := . }}
func main() {
	logger := zerolog.New(os.Stdout)
	db, err := pgdb.Dial(pgdb.Config{
		User: "postgres",
		Password: "postgres",
		Host: "localhost",
		Port: "5432",
		DatabaseName: "{{ $root.Name }}",
		MigrationDir: "./migrations",
		SSLDisabled: true,
		MaxIdleConns: 10,
		MaxOpenConns: 10,
		MaxConnLifespan: time.Second * time.Duration(30),
	})
	if err != nil {
		panic(err)
	}

	migrationsDiff, err := db.DiffMigrations()
	if err != nil {
		panic(err)
	}

	currentMigration, err := db.GetCurrentMigration()
	if err != nil {
		panic(err)
	}

	migrationStatus, err := db.RunMigrations(logger, currentMigration, migrationsDiff...)
	if err != nil {
		panic(err)
	}

	log.Printf("applied %v\n", migrationStatus.Applied)
	log.Printf("skipped %v\n", migrationStatus.Skipped)
	log.Printf("failed %v\n", migrationStatus.Failed)
	log.Printf("latest %v\n", migrationStatus.Latest)

	service := ServiceInstance{Database: db, Context: context.Background()}
	mux := goji.NewMux()
	{{- "\n" }}
	{{- range $j, $t := $root.Types }}
	mux.HandleFunc(pat.Options("/rpc/v1/create{{ $t.Name | title }}"), func(res http.ResponseWriter, req *http.Request) {
		input := {{ $t.Name | title }}Input{}
		err := json.NewDecoder(req.Body).Decode(&input)
		if err != nil {
			http.Error(res, fmt.Sprintf("create{{ $t.Name | title }} failed to decode input: '%s'", err.Error()), http.StatusBadRequest)
			return
		}

		created, httpErr := service.Create{{ $t.Name | title }}(input)
		if httpErr != nil {
			httpErr.Write(res)
			return
		}

		res.WriteHeader(http.StatusCreated)
		err = json.NewEncoder(res).Encode(created)
		if err != nil {
			http.Error(res, err.Error(), 500)
			return
		}

		// {{- if $root.EnableEventStreams }}
		// go eventsteam.Push(Event{
		// 	TypeOf: Event{{ $t.Name | title }}Created,
		// 	ResourceID: created.ID,
		// 	CompletedAt: time.Now().UTC(),
		// })
		// {{- end}}
	})

	mux.HandleFunc(pat.Options("/rpc/v1/get{{ $t.Name | title }}"), func(res http.ResponseWriter, req *http.Request) {
		query := {{ $t.Name | title }}Query{}
		err := json.NewDecoder(req.Body).Decode(&query)
		if err != nil {
			http.Error(res, fmt.Sprintf("get{{ $t.Name | title }} failed to decode input: '%s'", err.Error()), http.StatusBadRequest)
			return
		}

		resource, httpErr := service.Get{{ $t.Name | title }}(query)
		if httpErr != nil {
			httpErr.Write(res)
			return
		}

		err = json.NewEncoder(res).Encode(resource)
		if err != nil {
			http.Error(res, err.Error(), 500)
			return
		}
	})

	mux.HandleFunc(pat.Options("/rpc/v1/getAll{{ $t.Name | title }}s"), func(res http.ResponseWriter, req *http.Request) {
		pageMeta := page.Page{}
		err := json.NewDecoder(req.Body).Decode(&pageMeta)
		if err != nil {
			http.Error(res, fmt.Sprintf("get{{ $t.Name | title }} failed to decode input: '%s'", err.Error()), http.StatusBadRequest)
			return
		}

		resources, httpErr := service.GetAll{{ $t.Name | title }}s()
		if httpErr != nil {
			httpErr.Write(res)
			return
		}

		err = json.NewEncoder(res).Encode(resources)
		if err != nil {
			http.Error(res, err.Error(), 500)
			return
		}
	})
	
	// {{- if $root.EnableUniversalArchiving }}
	// mux.HandleFunc(pat.Options("/rpc/v1/archive{{ $t.Name | title }}"), func(res http.ResponseWriter, req *http.Request) {
	// 	params := struct{ ID string }{}
	// 	err := json.NewDecoder(req.Body).Decode(&params)
	// 	if err != nil {
	// 		http.Error(res, err.Error(), 500)
	// 		return
	// 	}
		
	// 	err = service.Archive{{ $t.Name | title }}(params.ID)
	// 	if err != nil {
	// 		http.Error(res, err.Error(), 500)
	// 		return
	// 	}
	// })
	// {{- else }}
	// mux.HandleFunc(pat.Options("/rpc/v1/delete{{ $t.Name | title }}"), func(res http.ResponseWriter, req *http.Request) {
	// 	params := struct{ ID string }{}
	// 	err := json.NewDecoder(req.Body).Decode(&params)
	// 	if err != nil {
	// 		http.Error(res, err.Error(), 500)
	// 		return
	// 	}
		
	// 	err = service.Delete{{ $t.Name | title }}(params.ID)
	// 	if err != nil {
	// 		http.Error(res, err.Error(), 500)
	// 		return
	// 	}
	// })
	// {{- end }}
	{{- end }}
	log.Println("starting service on port 5000...")
	http.ListenAndServe(":5000", mux)
}