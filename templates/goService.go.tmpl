package main

import (
	"context"
	"time"

	"github.com/cosmotek/pgdb"
	"github.com/google/uuid"
	"github.com/jmoiron/sqlx"
)

type ServiceInstance struct{
	Context context.Context
	DB *pgdb.Database
}
{{- "\n" }}
{{- $root := . }}
// custom enum type definitions
{{- range $i, $e := $root.GeneratedTypeBlocks }}
{{ $e }}
{{- end }}

{{- range $j, $t := $root.Forms }}
type {{ $t.Name | title }}Input struct{
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | title }} {{ $e.Primitive.GoType }}
	{{- end }}
}
{{- end}}

{{ $root.Forms | json }}
{{ $root.Types | json }}

{{- range $j, $t := $root.Types }}
type {{ $t.Name | title }} struct{
	ID uuid.UUID
	{{- if $root.EnableUniversalArchiving }}
	Archived bool
	{{- end }}
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | title }} {{ $e.Primitive.GoType }}
	{{- end }}
}

const {{ $t.Name }}CreateQueryStr = `
INSERT INTO {{ $t.Name }} (
	"id",
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | quotes }}{{ if last $i $f }}{{ else }},{{ end }}
	{{- end }}
) VALUES (
	$1,
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ "$" }}{{ $i | incr | incr }}{{ if last $i $f }}{{ else }},{{ end }}
	{{- end }}
);
`

func (s *ServiceInstance) Create{{ $t.Name | title }}() ({{ $t.Name | title }}, error) {
	input := {{ $t.Name | title }}{
		ID: uuid.New(),
		{{- if $root.EnableUniversalArchiving }}
		Archived: false,
		{{- end }}
		{{- range $i, $f := $t.Fields }}
		{{ $f.Name | title }}: {{ $f.Primitive.GoTypeZeroValueLiteral }},
		{{- end }}
	}
	
	err := s.DB.Update(s.Context, func(tx *sqlx.Tx) error {
		_, err := tx.Exec({{ $t.Name }}CreateQueryStr,{{" "}}{{range $i, $e := $f }}input.{{ $e.Name | title }}{{ if last $i $f }}{{ else }}, {{ end }}{{- end }})
		return err
	})
	if err != nil {
		return {{ $t.Name | title }}{}, err
	}
	
	return {{ $t.Name | title }}{}, nil
}

{{- "\n" }}
{{- if $root.EnableUniversalArchiving }}
func (s *ServiceInstance) Archive{{ $t.Name | title }}(id string) error {
	return s.DB.Update(s.Context, func(tx *sqlx.Tx) error {
		_, err := tx.Exec("UPDATE {{ $t.Name}} SET \"_archived\" = TRUE WHERE \"id\" = $1", id)
		return err
	})
}
{{- else }}
func (s *ServiceInstance) Delete{{ $t.Name | title }}(id string) error {
	return s.DB.Update(s.Context, func(tx *sqlx.Tx) error {
		_, err := tx.Exec("DELETE FROM {{ $t.Name}} WHERE \"id\" = $1", id)
		return err
	})
}
{{- end }}
{{- end }}