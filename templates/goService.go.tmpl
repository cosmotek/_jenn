package main

import (
	"context"
	"time"
	"net/http"

	"github.com/cosmotek/pgdb"
	"github.com/google/uuid"
	"github.com/jmoiron/sqlx"
	"github.com/cosmotek/_jenn/libs/httperr"
	"github.com/cosmotek/_jenn/libs/page"
)

// var dialect = goqu.Dialect("postgres")

type ServiceInstance struct{
	Context context.Context
	*pgdb.Database
}
{{- "\n" }}
{{- $root := . }}
// custom enum type definitions
{{- range $i, $e := $root.GeneratedTypeBlocks }}
{{ $e }}
{{- end }}

{{- range $j, $t := $root.Forms }}
type {{ $t.Name | title }}Input struct{
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | title }} {{ $e.Primitive.GoType }}
	{{- end }}
}
{{- end}}

{{- range $j, $t := $root.Types }}
type {{ $t.Name | title }}Input struct{
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | title }} {{ $e.Primitive.GoType }}
	{{- end }}
}

type {{ $t.Name | title }} struct{
	ID uuid.UUID `db:"id" json:"id"`
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | title }} {{ $e.Primitive.GoType }} `db:"{{ $e.Name }}" json:"{{ $e.Name }}"`
	{{- end }}
	{{- if $root.EnableUniversalArchiving }}
	Archived bool `db:"archived" json:"archived"`
	{{- end }}
}

const {{ $t.Name }}CreateQueryStr = `
INSERT INTO {{ $t.Name | quotes }} (
	"id",
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{ $e.Name | quotes }}{{ if last $i $f }}{{ else }},{{ end }}
	{{- end }}
) VALUES (
	:id,
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	:{{ $e.Name }}{{ if last $i $f }}{{ else }},{{ end }}
	{{- end }}
);
`

func (s *ServiceInstance) Create{{ $t.Name | title }}(input {{ $t.Name | title }}Input) ({{ $t.Name | title }}, *httperr.HTTPError) {
	// {{- range $i, $f := $t.Fields }}
	// {{- if $f.Optional }}

	// {{- end }}
	// {{- end }}
	
	newResource := {{ $t.Name | title }}{
		ID: uuid.New(),
		{{- if $root.EnableUniversalArchiving }}
		Archived: false,
		{{- end }}
		{{- range $i, $f := $t.Fields }}
		{{ $f.Name | title }}: input.{{ $f.Name | title }},
		{{- end }}
	}
	
	err := s.Update(s.Context, func(tx *sqlx.Tx) error {
		_, err := tx.NamedExec({{ $t.Name }}CreateQueryStr, newResource)
		return err
	})
	if err != nil {
		return {{ $t.Name | title }}{}, httperr.New(err, http.StatusInternalServerError)
	}
	
	return newResource, nil
}

type {{ $t.Name | title }}Query struct{
	ID *string `db:"id" json:"id"`
	{{- $f := $t.Fields }}
	{{- range $i, $e := $f }}
	{{- if $e.Selector }}
	{{ $e.Name | title }} *{{ $e.Primitive.GoType }}
	{{- end}}
	{{- end }}
}

func (s *ServiceInstance) Get{{ $t.Name | title }}(queryInput {{ $t.Name | title }}Query) ({{ $t.Name | title }}, *httperr.HTTPError) {
	// {{- range $i, $f := $t.Fields }}
	// {{- if $f.Optional }}

	// {{- end }}
	// {{- end }}

	// query, _, err := 

	resource := {{ $t.Name | title }}{}
	err := s.View(s.Context, func(tx *sqlx.Tx) error {
		return tx.Get(&resource, `select * from {{ $t.Name | quotes }} where id = $1`, queryInput.ID)
	})
	if err != nil {
		return {{ $t.Name | title }}{}, httperr.New(err, http.StatusInternalServerError)
	}
	
	return resource, nil
}

func (s *ServiceInstance) GetAll{{ $t.Name | title }}s(pagination page.PageInput) (page.Page, []{{ $t.Name | title }}, *httperr.HTTPError) {
	// {{- range $i, $f := $t.Fields }}
	// {{- if $f.Optional }}

	// {{- end }}
	// {{- end }}

	// query, _, err := 

	pageMeta := page.Page{}
	resources := []{{ $t.Name | title }}{}

	err := s.View(s.Context, func(tx *sqlx.Tx) error {
		return tx.Select(&resources, `select * from {{ $t.Name | quotes }} limit 100`)
	})
	if err != nil {
		return page.Page{}, []{{ $t.Name | title }}{}, httperr.New(err, http.StatusInternalServerError)
	}
	
	return pageMeta, resources, nil
}


{{- "\n" }}
// {{- if $root.EnableUniversalArchiving }}
// func (s *ServiceInstance) Archive{{ $t.Name | title }}(id string) error {
// 	return s.DB.Update(s.Context, func(tx *sqlx.Tx) error {
// 		_, err := tx.Exec("UPDATE {{ $t.Name}} SET \"_archived\" = TRUE WHERE \"id\" = $1", id)
// 		return err
// 	})
// }
// {{- else }}
// func (s *ServiceInstance) Delete{{ $t.Name | title }}(id string) error {
// 	return s.DB.Update(s.Context, func(tx *sqlx.Tx) error {
// 		_, err := tx.Exec("DELETE FROM {{ $t.Name}} WHERE \"id\" = $1", id)
// 		return err
// 	})
// }
// {{- end }}
{{- end }}